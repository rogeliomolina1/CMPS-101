#Rogelio Molina-Marquez
#rgmolina
#CMPS 101-Allen Van Gelder
#
#I have read and understood the Academic Misconduct Policy for
#Undergraduates, the related sections 102.01-102.016 and 105.15 of the
#UC Santa Cruz Student Policies and Regulations Handbook,
#and the related sections of the class syllabus.
#
#Rogelio Molina-Marquez
#
#I wrote this assignment using only permitted sources that do not
#require citation, according to the syllabus
#
#Files submitted:
#graph02.c
#intVec.c
#intVec.h
#loadGraph.c
#loadGraph.h
#test1.txt
#test2.txt
#test3.txt
#test4.txt
#README
#Makefile
#
#When run, the graph02 program will go through the following sequence:
#
#Read input file setting up original array of adjacency lists
#Print original array of adjacency lists
#Make and adjacency matrix on original array of adjacency lists
#print the adjecencey matrix if n<=12
#
#transpose the original array of adjacency lists giving
#transposed array of adjacency lists
#Print transposed array of adjacency lists
#Make adjecency matrix on transposed array of adjacency lists
#print the adjecencey matrix if n<=12
#
#transpose the trapnsposed array of adjacency lists giving
#a twice-transposed array of adjacency lists
#Print twice-transposed array of adjacency lists
#Make adjacency matrix on twice-transposed array of adjacency lists
#print the adjecencey matrix if n<=12
#
#
#
#After running the program I noticed that the original array of adjacency lists 
#and the twice transposed array of adjacency lists were the same.
#
#
#
#When the program is run with test1.txt and as directed the output is given below 
#which matches the expected output.
#
#test1.txt contains:
#
#3
#1 2 3.0
#13 5
#12 7 9.0
#
#Output:

#Opened test1.txt for input.
#n = 3
#m = 1
#1       [2]
#2       []
#3       []
#       1  2  3
#     ---------
#  1 :  0  1  0
#  2 :  0  0  0
#  3 :  0  0  0
#n = 3
#m = 1
#1       []
#2       [1]
#3       []
#       1  2  3
#     ---------
#  1 :  0  0  0
#  2 :  1  0  0
#  3 :  0  0  0
#n = 3
#m = 1
#1       [2]
#2       []
#3       []
#       1  2  3
#     ---------
#  1 :  0  1  0
#  2 :  0  0  0
#  3 :  0  0  0

# The output is correct because it ignores the inputs bigger than n, which in this case
# was 3.

#When the program is run with test2.txt and as directed the output is given below 
#which matches the expected output.

#test2.txt contains:

#14
#1 2 3.0
#13 5
#12 7 9.0

#Output:

#Opened test2.txt for input.
#n = 14
#m = 3
#1       [2]
#2       []
#3       []
#4       []
#5       []
#6       []
#7       []
#8       []
#9       []
#10      []
#11      []
#12      [7]
#13      [5]
#14      []
#n = 14
#m = 3
#1       []
#2       [1]
#3       []
#4       []
#5       [13]
#6       []
#7       [12]
#8       []
#9       []
#10      []
#11      []
#12      []
#13      []
#14      []
#n = 14
#m = 3
#1       [2]
#2       []
#3       []
#4       []
#5       []
#6       []
#7       []
#8       []
#9       []
#10      []
#11      []
#12      [7]
#13      [5]
#14      []
 
# The output is correct because it does not print the adjacency matrix since n is
#greater than 12.


#When the program is run with test3.txt and as directed the output is given below 
#which matches the expected output.

#test3.txt contains:

#11
#1 3 5 6
#1 2
#6 4 0.0

#Output

#Bad edge: 1 3 5 6

# The output is correct because the bad vertex which contains 4 elements causes the program
# to stop and an error message is displayed.



#When the program is run with test4.txt and as directed the output is given below 
#which matches the expected output.

#test4.txt contains:

#6
#1 3 2.7
#5 4 -3
#1 5 0.0
#1 4 0.0

#Output

#Opened test4.txt for input.
#n = 6
#m = 4
#1       [4, 5, 3]
#2       []
#3       []
#4       []
#5       [4]
#6       []
#
#       1  2  3  4  5  6
#     ------------------
#  1 :  0  0  1  1  1  0
#  2 :  0  0  0  0  0  0
#  3 :  0  0  0  0  0  0
#  4 :  0  0  0  0  0  0
#  5 :  0  0  0  1  0  0
#  6 :  0  0  0  0  0  0
#
#n = 6
#m = 4
#1       []
#2       []
#3       [1]
#4       [5, 1]
#5       [1]
#6       []
#
#       1  2  3  4  5  6
#     ------------------
#  1 :  0  0  0  0  0  0
#  2 :  0  0  0  0  0  0
#  3 :  1  0  0  0  0  0
#  4 :  1  0  0  0  1  0
#  5 :  1  0  0  0  0  0
#  6 :  0  0  0  0  0  0

n = 6
m = 4
1       [5, 4, 3]
2       []
3       []
4       []
5       [4]
6       []

       1  2  3  4  5  6
     ------------------
  1 :  0  0  1  1  1  0
  2 :  0  0  0  0  0  0
  3 :  0  0  0  0  0  0
  4 :  0  0  0  0  0  0
  5 :  0  0  0  1  0  0
  6 :  0  0  0  0  0  0


# The output is correct because the twice transposed graph matches the original 
#graph both for adjacency lists and adjacency matrices.

#When the program is run with test4.txt and as undirected the output is given below 
#which matches the expected output.

#test4.txt contains:

#6
#1 3 2.7
#5 4 -3
#1 5 0.0
#1 4 0.0

#Output

#Opened test4.txt for input.
#n = 6
#m = 8
#1       [4, 5, 3]
#2       []
#3       [1]
#4       [1, 5]
#5       [1, 4]
#6       []
#
#       1  2  3  4  5  6
#     ------------------
#  1 :  0  0  1  1  1  0
#  2 :  0  0  0  0  0  0
#  3 :  1  0  0  0  0  0
#  4 :  1  0  0  0  1  0
#  5 :  1  0  0  1  0  0
#  6 :  0  0  0  0  0  0
#
#n = 6
#m = 8
#1       [5, 4, 3]
#2       []
#3       [1]
#4       [5, 1]
#5       [4, 1]
#6       []
#
#       1  2  3  4  5  6
#     ------------------
#  1 :  0  0  1  1  1  0
#  2 :  0  0  0  0  0  0
#  3 :  1  0  0  0  0  0
#  4 :  1  0  0  0  1  0
#  5 :  1  0  0  1  0  0
#  6 :  0  0  0  0  0  0

#n = 6
#m = 8
#1       [5, 4, 3]
#2       []
#3       [1]
#4       [5, 1]
#5       [4, 1]
#6       []
#
#       1  2  3  4  5  6
#     ------------------
#  1 :  0  0  1  1  1  0
#  2 :  0  0  0  0  0  0
#  3 :  1  0  0  0  0  0
#  4 :  1  0  0  0  1  0
#  5 :  1  0  0  1  0  0
#  6 :  0  0  0  0  0  0
#
# The output is correct because the all graphs match 
# both for adjacency lists and adjacency matrices.
